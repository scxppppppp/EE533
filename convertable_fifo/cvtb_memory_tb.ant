////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2003 Xilinx, Inc.
// All Right Reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 10.1.03
//  \   \         Application : ISE
//  /   /         Filename : cvtb_memory_tb.ant
// /___/   /\     Timestamp : Sat Mar 12 16:56:20 2022
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: 
//Design Name: cvtb_memory_tb
//Device: Xilinx
//
`timescale 1ns/1ps

module cvtb_memory_tb;
    reg clk = 1'b0;
    reg [8:0] cpu_addr_in = 9'b000000000;
    reg [1:0] cpu_cmd = 2'b00;
    reg cpu_ctrl = 1'b0;
    reg [63:0] cpu_din = 64'b0000000000000000000000000000000000000000000000000000000000000000;
    reg cpu_write = 1'b0;
    reg end_of_pkt = 1'b0;
    reg [7:0] in_ctrl = 8'b00000000;
    reg [63:0] in_data = 64'b0000000000000000000000000000000000000000000000000000000000000000;
    reg in_wr = 1'b0;
    reg out_rdy = 1'b0;
    reg rst = 1'b0;
    wire [63:0] dout_a;
    wire hold;
    wire [7:0] out_ctrl;
    wire [63:0] out_data;
    wire out_wr;

    parameter PERIOD = 200;
    parameter real DUTY_CYCLE = 0.5;
    parameter OFFSET = 100;

    initial    // Clock process for clk
    begin
        #OFFSET;
        forever
        begin
            clk = 1'b0;
            #(PERIOD-(PERIOD*DUTY_CYCLE)) clk = 1'b1;
            #(PERIOD*DUTY_CYCLE);
        end
    end

    CVTB_memory UUT (
        .clk(clk),
        .cpu_addr_in(cpu_addr_in),
        .cpu_cmd(cpu_cmd),
        .cpu_ctrl(cpu_ctrl),
        .cpu_din(cpu_din),
        .cpu_write(cpu_write),
        .end_of_pkt(end_of_pkt),
        .in_ctrl(in_ctrl),
        .in_data(in_data),
        .in_wr(in_wr),
        .out_rdy(out_rdy),
        .rst(rst),
        .dout_a(dout_a),
        .hold(hold),
        .out_ctrl(out_ctrl),
        .out_data(out_data),
        .out_wr(out_wr));

    integer TX_FILE = 0;
    integer TX_ERROR = 0;
    
    initial begin    // Annotation process for clock clk
        #0;
        ANNOTATE_dout_a;
        ANNOTATE_hold;
        ANNOTATE_out_ctrl;
        ANNOTATE_out_data;
        ANNOTATE_out_wr;
        #OFFSET;
        forever begin
            #115;
            ANNOTATE_dout_a;
            ANNOTATE_hold;
            ANNOTATE_out_ctrl;
            ANNOTATE_out_data;
            ANNOTATE_out_wr;
            #85;
        end
    end

    initial begin  // Open the annotations file...
        TX_FILE = $fopen("/home/ise/sf/ee533_cpu/convertable_fifo/cvtb_memory_tb.ano");
        #4200 // Final time:  4200 ns
        $display("Success! Annotation Simulation Complete.");
        $fdisplay(TX_FILE, "Total[%d]", TX_ERROR);
        $fclose(TX_FILE);
        $finish;
    end

    initial begin
        // -------------  Current Time:  100ns
        #100;
        rst = 1'b1;
        in_wr = 1'b1;
        out_rdy = 1'b1;
        // -------------------------------------
        // -------------  Current Time:  185ns
        #85;
        cpu_addr_in = 9'b000000100;
        cpu_din = 64'b0000000000000000000000000000000000000000000000000000000001101001;
        in_ctrl = 8'b00000001;
        in_data = 64'b0000000000000000000000000000000000000000000000000000000000000001;
        // -------------------------------------
        // -------------  Current Time:  385ns
        #200;
        rst = 1'b0;
        in_ctrl = 8'b00000000;
        in_data = 64'b0000000000000000000000000000000000000000000000000000000000000011;
        // -------------------------------------
        // -------------  Current Time:  585ns
        #200;
        in_ctrl = 8'b00000001;
        in_data = 64'b0000000000000000000000000000000000000000000000000000000000000111;
        // -------------------------------------
        // -------------  Current Time:  785ns
        #200;
        cpu_addr_in = 9'b000000010;
        in_ctrl = 8'b00000000;
        in_data = 64'b0000000000000000000000000000000000000000000000000000000000001111;
        // -------------------------------------
        // -------------  Current Time:  985ns
        #200;
        in_ctrl = 8'b00000001;
        in_data = 64'b0000000000000000000000000000000000000000000000000000000000011111;
        // -------------------------------------
        // -------------  Current Time:  1185ns
        #200;
        in_ctrl = 8'b00000000;
        in_data = 64'b0000000000000000000000000000000000000000000000000000000000111111;
        // -------------------------------------
        // -------------  Current Time:  1385ns
        #200;
        end_of_pkt = 1'b1;
        in_ctrl = 8'b00000001;
        in_data = 64'b0000000000000000000000000000000000000000000000000000000001111111;
        // -------------------------------------
        // -------------  Current Time:  1585ns
        #200;
        end_of_pkt = 1'b0;
        in_ctrl = 8'b00000000;
        in_data = 64'b0000000000000000000000000000000000000000000000000000000011111111;
        // -------------------------------------
        // -------------  Current Time:  1785ns
        #200;
        cpu_addr_in = 9'b000000101;
        // -------------------------------------
        // -------------  Current Time:  1985ns
        #200;
        cpu_write = 1'b1;
        cpu_addr_in = 9'b000000010;
        // -------------------------------------
        // -------------  Current Time:  2185ns
        #200;
        cpu_write = 1'b0;
        cpu_addr_in = 9'b000000011;
        cpu_cmd = 2'b01;
        // -------------------------------------
        // -------------  Current Time:  2385ns
        #200;
        cpu_addr_in = 9'b000000010;
        cpu_cmd = 2'b00;
        // -------------------------------------
        // -------------  Current Time:  2585ns
        #200;
        cpu_ctrl = 1'b1;
        // -------------------------------------
        // -------------  Current Time:  2785ns
        #200;
        cpu_write = 1'b1;
        cpu_cmd = 2'b01;
        // -------------------------------------
        // -------------  Current Time:  2985ns
        #200;
        cpu_write = 1'b0;
        cpu_cmd = 2'b00;
        // -------------------------------------
        // -------------  Current Time:  3185ns
        #200;
        cpu_cmd = 2'b01;
        // -------------------------------------
        // -------------  Current Time:  3385ns
        #200;
        cpu_cmd = 2'b00;
        // -------------------------------------
        // -------------  Current Time:  3585ns
        #200;
        cpu_cmd = 2'b11;
        // -------------------------------------
    end

    task ANNOTATE_dout_a;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,dout_a,%b]", $time, dout_a);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_hold;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,hold,%b]", $time, hold);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_out_ctrl;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,out_ctrl,%b]", $time, out_ctrl);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_out_data;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,out_data,%b]", $time, out_data);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_out_wr;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,out_wr,%b]", $time, out_wr);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

endmodule

